{"version":3,"sources":["assets/img/day_partial_cloud.svg","assets/img/day_rain.svg","assets/img/mist.svg","assets/img/night_half_moon_partial_cloud.svg","assets/img/night_half_moon_rain.svg","assets/img/overcast.svg","assets/img/snow.svg","assets/img/day_clear.svg","assets/img/day_rain_thunder.svg","assets/img/night_half_moon_clear.svg","assets/img/night_half_moon_rain_thunder.svg","Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","spinner","className","icons","clearDay","clearNight","partialCloudyDay","partialCloudyNight","overcast","dayRain","nightRain","dayThunder","nightThunder","snow","mist","App","state","weatherArr","currentDayArr","zip","city","degrees","isF","isLoading","getData","setState","axios","get","then","result","weather7Days","location","data","name","list","map","cur","i","push","catch","error","zipHandler","event","target","value","submitZip","degConverter","convert","this","today","d","Date","dt_txt","day","getDay","date","getDate","month","getMonth","year","getFullYear","currentDay","key","id","weather","description","onChange","type","defaultChecked","htmlFor","placeholder","e","onClick","src","icon","alt","Math","round","main","temp","feels_like","temp_max","temp_min","humidity","nextDays","loader","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.58939567.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/day_partial_cloud.b91536be.svg\";","module.exports = __webpack_public_path__ + \"static/media/day_rain.f3e63c91.svg\";","module.exports = __webpack_public_path__ + \"static/media/mist.d179993b.svg\";","module.exports = __webpack_public_path__ + \"static/media/night_half_moon_partial_cloud.d12eea9f.svg\";","module.exports = __webpack_public_path__ + \"static/media/night_half_moon_rain.9a18b226.svg\";","module.exports = __webpack_public_path__ + \"static/media/overcast.d1ef5bb2.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.5f54ba40.svg\";","module.exports = __webpack_public_path__ + \"static/media/day_clear.33118352.svg\";","module.exports = __webpack_public_path__ + \"static/media/day_rain_thunder.538e34c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/night_half_moon_clear.9b23c6ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/night_half_moon_rain_thunder.7685503a.svg\";","import React from 'react';\nimport './Spinner.css';\n\nconst spinner = () => {\n    return (\n        <div className=\"lds-ellipsis centered\"><div></div><div></div><div></div><div></div></div>\n    );\n}\n\nexport default spinner;","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Spinner from './Spinner';\n\nimport clearDay from './assets/img/day_clear.svg';\nimport partialCloudyDay from './assets/img/day_partial_cloud.svg';\nimport dayThunder from './assets/img/day_rain_thunder.svg';\nimport dayRain from './assets/img/day_rain.svg';\nimport mist from './assets/img/mist.svg';\nimport clearNight from './assets/img/night_half_moon_clear.svg';\nimport partialCloudyNight from './assets/img/night_half_moon_partial_cloud.svg';\nimport nightThunder from './assets/img/night_half_moon_rain_thunder.svg';\nimport nightRain from './assets/img/night_half_moon_rain.svg';\nimport overcast from './assets/img/overcast.svg';\nimport snow from './assets/img/snow.svg';\n\nconst icons = {\n  '01d': clearDay,\n  '01n': clearNight,\n  '02d': partialCloudyDay,\n  '02n': partialCloudyNight,\n  '03d': overcast,\n  '03n': overcast,\n  '04d': partialCloudyDay,\n  '04n': partialCloudyNight,\n  '09d': dayRain,\n  '09n': nightRain,\n  '10d': dayRain,\n  '10n': nightRain,\n  '11d': dayThunder,\n  '11n': nightThunder,\n  '13d': snow,\n  '13n': snow,\n  '50d': mist,\n  '50n': mist\n}\n\nclass App extends Component {\n  state = {\n    weatherArr: [],\n    currentDayArr: [],\n    zip: '07701',\n    city: '',\n    degrees: 'imperial',\n    isF: true,\n    isLoading: false\n  }\n\n  getData = () => {\n    this.setState({isLoading: true});\n    //5 day forcast\n    //`http://api.openweathermap.org/data/2.5/forecast?zip={zip code},{country code}&appid={your api key}`\n\n    let key = '39ff9355af7fb6c4e1f585a76ac2282d';\n\n    axios.get(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/forecast?zip=${this.state.zip}&appid=${key}&units=${this.state.degrees}`)\n      .then(result => {\n        let weather7Days = []; \n        let city = result.data.city.name;\n        let location = city;\n\n        result.data.list.map((cur, i) => {\n          if (i % 8 === 0) {weather7Days.push(cur);\n          }\n        });\n        this.setState({ weatherArr: weather7Days, city: location, isLoading: false});\n      }).catch(error => {\n        // console.log(error);\n        this.setState({isLoading: false});\n      })\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  zipHandler = (event) => {\n    this.setState({zip:event.target.value});\n  }\n\n  submitZip = () => {\n    this.getData(); \n  }\n\n  degConverter = (event) => {\n      event.target.value === 'Fahrenheit' ? this.setState({isF: true}) : this.setState({isF: false}); \n  }\n\n  convert = (degrees) => {\n      //if this.state.isF is false return Celsius\n    if (!this.state.isF) {\n      return (degrees - 32) * (5/9);\n    } else {\n      // else return Fahrenheit\n      return degrees;\n    }\n  }\n\n  render() {\n    let today = this.state.weatherArr.map((cur, i) => {\n      let d = new Date(cur.dt_txt);\n      let day = d.getDay();\n      let arrDays = ['Sunday', 'Monday', 'Tuesday', 'Wendesday', 'Thursday', 'Friday', 'Saturday'];\n      day = arrDays[day];\n      let date = d.getDate();\n      let month = d.getMonth();\n      let arrMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n      month = arrMonths[month];\n      let year = d.getFullYear();\n      let currentDay = `${day}, ${month} ${date} ${year}`\n      if (i === 0) {\n        return (\n          <div key={`today`} className='today' id='today'>\n            <span className='topBoxOne'>\n              <div className='date'>{currentDay}</div>\n              <div className='topLeft'>Today's forecast in {this.state.city}: <br></br>{cur.weather[0].description}</div>\n              <section className='inputBlock'>\n                <div onChange={(event) => this.degConverter(event)}>\n                  <input type='radio' id='Fahrenheit' value=\"Fahrenheit\" name=\"degrees\" className='degr' defaultChecked></input>\n                  <label htmlFor=\"Fahrenheit\" className='degr'>&#176;F</label>\n                  <input type=\"radio\" id=\"Celsius\" name=\"degrees\" value=\"Celsius\" className='degr'></input>\n                  <label htmlFor=\"Celsius\" className='degr'>&#176;C</label>\n                </div>\n                <input className='zip' type='text' placeholder='Enter Zip Code' onChange={(e) => this.zipHandler(e)} ></input>\n                <button className='button' onClick={this.submitZip}>Submit</button>\n              </section>\n            </span>\n            <span className='icon-block'>\n              <img className='icon-today' src={icons[cur.weather[0].icon]} alt='weather display'></img>\n            </span>\n            <span className='topBoxThree'>\n              <div className='textToday'>Current Tempurature: {Math.round(this.convert(cur.main.temp))}&#176;</div>\n              <div className='textToday'>Feels like: {Math.round(this.convert(cur.main.feels_like))}&#176;</div>\n              <div className='textToday'>Temp-max: {Math.round(this.convert(cur.main.temp_max))}&#176;</div>\n              <div className='textToday'>Temp-min: {Math.round(this.convert(cur.main.temp_min))}&#176;</div>\n              <div className='textToday'>Humidity: {Math.round(cur.main.humidity)}&#37;</div>\n            </span>\n          </div>\n        );\n      }\n    });\n    let nextDays = this.state.weatherArr.map((cur, i) => {\n      let d = new Date(cur.dt_txt);\n      let day = d.getDay();\n      let arrDays = ['Sunday', 'Monday', 'Tuesday', 'Wendesday', 'Thursday', 'Friday', 'Saturday'];\n      day = arrDays[day];\n      if (i > 0) {\n        return (\n          <div key={i} className='weather' id={`weather${i+1}`}>\n            <img className='icon' src={icons[cur.weather[0].icon]} alt='weather display'></img>\n            <span className='textWeather'>Forecast for {day}: {cur.weather[0].description}</span>\n            <span className='textWeather'>Temp-max: {Math.round(this.convert(cur.main.temp_max))}&#176;</span>\n            <span className='textWeather'>Temp-min: {Math.round(this.convert(cur.main.temp_min))}&#176;</span>\n            <span className='textWeather'>Humidity:  {Math.round(cur.main.humidity)}&#37;</span>\n          </div>\n        );\n      };\n    });\n\n    let loader = <Spinner />;\n\n    if (!this.state.isLoading) {\n      loader = (\n        <div className=\"App\">\n           {today}\n        <section className='bottom'>\n        {nextDays}\n       </section>\n        </div>\n      );\n    }\n    return (\n      <div >\n        {loader}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}